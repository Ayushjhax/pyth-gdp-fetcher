version: '3.8'

services:
  # Main application service
  sonic-gdp-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sonic-gdp-dashboard
    ports:
      - "3000:3000"
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sonic-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonic-gdp.rule=Host(`gdp.yourdomain.com`)"
      - "traefik.http.routers.sonic-gdp.entrypoints=websecure"
      - "traefik.http.routers.sonic-gdp.tls.certresolver=letsencrypt"

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: sonic-gdp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - sonic-network
    command: redis-server --appendonly yes

  # PostgreSQL for data persistence (optional)
  postgres:
    image: postgres:15-alpine
    container_name: sonic-gdp-postgres
    environment:
      POSTGRES_DB: sonic_gdp
      POSTGRES_USER: sonic_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - sonic-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: sonic-gdp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - sonic-gdp-dashboard
    restart: unless-stopped
    networks:
      - sonic-network

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: sonic-gdp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - sonic-network

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: sonic-gdp-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - sonic-network

  # Jaeger for distributed tracing (optional)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: sonic-gdp-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    networks:
      - sonic-network

networks:
  sonic-network:
    driver: bridge
    name: sonic-gdp-network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
